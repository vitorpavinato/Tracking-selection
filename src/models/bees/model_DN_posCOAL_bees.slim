function (io)countGametes(io$ x)
	{
		n = sum(sim.subpopulations.individuals.pedigreeParentIDs == x);
		return n;	
	}

initialize() {
	
	// Genome-wide Neutral mutations fitness
	defineConstant("fm1", 0.0);        									// fm1 => the fitness for all neutral mutations "m1" - it is fixed with value 0;
	defineConstant("fm2", 0.0);       									// fm2 => the fitness for all neutral mutations "m2" - it is fixed with value 0;
	
	// INITIALIZE SIMULATION PARAMETERS
	
	initializeSLiMOptions(keepPedigrees = T);
	initializeTreeSeq();
	initializeMutationRate(mu);
	
	// Define the GenomicElementType in the GENOME
	initializeMutationType("m1", dm1, "f", fm1);
	initializeMutationType("m2", dm2, "f", fm2);
	initializeMutationType("m3", dm3, "g", gammaM, gammak);
	m1.mutationStackPolicy = "s";
	m2.mutationStackPolicy = "s";
	m3.mutationStackPolicy = "s";
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T;
	m3.convertToSubstitution = T;
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", c(m2,m3), c((1 - prbe), prbe));
	
	// GENOME's GenomicElementTypes
	
	// Assign each GenomicElementType:
	// g2
	if (!isNULL(g2_idx))
	for(i in g2_idx){
		initializeGenomicElement(g2, asInteger(e_starts[i]), asInteger(e_ends[i]));
	}
	// g1
	if(!isNULL(g1_idx))
	for(j in g1_idx){
		initializeGenomicElement(g1, asInteger(e_starts[j]), asInteger(e_ends[j]));
	}
		
	defineConstant("RECOMBRATES", "initializeRecombinationRate(rr_rates, asInteger(rr_limits));");
	executeLambda(RECOMBRATES);
}

1 late () {

	sim.readFromPopulationFile(filePath=paste0(outputpath + "slim_coalesced_DN_" + simID + ".tree"));				
	catn("Read .tree file at generation: " + sim.generation);
	
   // Sampling
	TS1b = sim.generation + 1;   // for TS1 after burn-in phase;
	TS1  = sim.generation + 2;   // for ONE generation BEFORE TS1
	defineConstant("T0", TS1);
			
	TS2  = T0 + tau[0];    		 // for TS2
	TS2b = TS2 -1;  	          // for ONE generation BEFORE TS2
	
	TS3  = T0 + tau[1];    		 // for TS3
	TS3b = TS3 -1;  	          // for ONE generation BEFORE TS3
	
	TS4  = T0 + tau[2];    		 // for TS4
	TS4b = TS4 -1;  	          // for ONE generation BEFORE TS4
	
	TS5  = T0 + tau[3];    		 // for TS5
	TS5b = TS5 -1;  	          // for ONE generation BEFORE TS5
	
	TS6  = T0 + tau[4];    		 // for TS6
	TS6b = TS6 -1;  	          // for ONE generation BEFORE TS6
	
	TS7  = T0 + tau[5];    		 // for TS7
	TS7b = TS7 -1;  	          // for ONE generation BEFORE TS7
	
	
	// Set the generations for each event - it schedule script blocks
	
	// All generation from TS1 to TS7
	sim.rescheduleScriptBlock(s0, start = TS1, end = TS7); // genetic load from TS1 to TS2 - original
	sim.rescheduleScriptBlock(s1, start = TS1, end = TS7); // pedigree
	
	// TS1
	sim.rescheduleScriptBlock(s2, start = TS1b, end = TS1b); // ONE generation before TS1
	sim.rescheduleScriptBlock(s3, start = TS1, end = TS1);   // TS1
	sim.rescheduleScriptBlock(s4, start = TS1, end = TS1);   // TS1 "kill"
	sim.rescheduleScriptBlock(s5, start = TS1, end = TS1);   // TS1 "force" N to Ncs
	
	// TS2
	sim.rescheduleScriptBlock(s6, start = TS2b, end = TS2b); // ONE generation before TS2
	sim.rescheduleScriptBlock(s7, start = TS2, end = TS2);   // TS2
	sim.rescheduleScriptBlock(s8, start = TS2, end = TS2);   // TS2 "kill"
	sim.rescheduleScriptBlock(s9, start = TS2, end = TS2);   // TS2 "force" N to Ncs
	
	// TS3
	sim.rescheduleScriptBlock(s10, start = TS3b, end = TS3b); // ONE generation before TS3
	sim.rescheduleScriptBlock(s11, start = TS3, end = TS3);  // TS3
	sim.rescheduleScriptBlock(s12, start = TS3, end = TS3);  // TS3 "kill"
	sim.rescheduleScriptBlock(s13, start = TS3, end = TS3);  // TS3 "force" N to Ncs
	
	// TS4
	sim.rescheduleScriptBlock(s14, start = TS4b, end = TS4b); // ONE generation before TS4
	sim.rescheduleScriptBlock(s15, start = TS4, end = TS4);   // TS4
	sim.rescheduleScriptBlock(s16, start = TS4, end = TS4);   // TS4 "kill"
	sim.rescheduleScriptBlock(s17, start = TS4, end = TS4);   // TS4 "force" N to Ncs
	
	// TS5
	sim.rescheduleScriptBlock(s18, start = TS5b, end = TS5b); // ONE generation before TS5
	sim.rescheduleScriptBlock(s19, start = TS5, end = TS5);   // TS5
	sim.rescheduleScriptBlock(s20, start = TS5, end = TS5);   // TS5 "kill"
	sim.rescheduleScriptBlock(s21, start = TS5, end = TS5);   // TS5 "force" N to Ncs
	
	// TS6
	sim.rescheduleScriptBlock(s22, start = TS6b, end = TS6b); // ONE generation before TS6
	sim.rescheduleScriptBlock(s23, start = TS6, end = TS6);   // TS6
	sim.rescheduleScriptBlock(s24, start = TS6, end = TS6);   // TS6 "kill"
	sim.rescheduleScriptBlock(s25, start = TS6, end = TS6);   // TS6 "force" N to Ncs
	
	// TS7
	sim.rescheduleScriptBlock(s26, start = TS7b, end = TS7b); // ONE generation before TS7
	sim.rescheduleScriptBlock(s27, start = TS7, end = TS7);   // TS7
}

s0 2 early() {

	if (any(sim.mutationsOfType(m3).selectionCoeff != 0))
	{
		if (max(sim.subpopulations.cachedFitness(NULL)) != mean(sim.subpopulations.cachedFitness(NULL)))
		{
			cachedW = sim.subpopulations.cachedFitness(NULL);
			cachedW = cachedW[!cachedW==0];
			geneticL = (max(cachedW) - mean(cachedW))/max(cachedW);
			//geneticL = (max(sim.subpopulations.cachedFitness(NULL)) - mean(sim.subpopulations.cachedFitness(NULL)))/max(sim.subpopulations.cachedFitness(NULL)); // Method evaluation - PODs
		} else {
			geneticL = 0;
		}	   
	} else {
		geneticL = 0;
	}
	
	// Save the generation and the genetic load
	geneticL = paste(sim.generation + "\t" + (sim.generation - T0) + "\t" + geneticL);
	
	// Output as a TXT file
	writeFile(filePath=paste0(outputpath + "slim_output_load_" + simID + ".txt"), contents=geneticL , append=T);
}

s1 2 late() {

	///////////////////////////////////////////////////////////
	// OUTPUT TS1:TS2 - POPULATION MUTATIONS AND PEDIGREE NE // 
   ///////////////////////////////////////////////////////////

	// GENOME
	//................
	
	// Take all the mutation in the population
	pop_genome = sortBy(unique(sim.mutations), "position");
		
	// Take all the mutation information needed
	pmuts_lines = sapply(pop_genome, "paste(c((applyValue.position+1), applyValue.id, applyValue.mutationType.id, applyValue.originGeneration, applyValue.selectionCoeff,'\\n'), '\\t');");
	
	// Prepare the output table
	pmuts_file = paste(pmuts_lines, "");
	pmuts_file = paste("POS"+"\t"+"MID"+"\t"+"MT"+"\t"+"GO"+"\t"+"S"+"\n")+pmuts_file;
	
	// output as a TXT file - CS1
	writeFile(filePath=paste0(outputpath + "slim_output_pmuts_t" + (sim.generation - T0) + "_" + simID + ".txt"), contents=pmuts_file, append=F);
	
	// PEDIGREE EFFECTIVE SIZE
	//...................
	
	uniqParents = unique(sim.subpopulations.individuals.pedigreeParentIDs);
	
	gametes = sapply(uniqParents, "countGametes(applyValue);"); // k => Gamete contribution of each parente (g-1 individuals);

	if (size(gametes) > 1)
	{
		ne = (4*p1.individualCount)/(2+var(gametes));
	} else {
		ne = (4*p1.individualCount)/(2+0); //Ne = 2N;
	}
	
	// Save the generation and the number of unique parentes IDs
	timene = paste(sim.generation + "\t" + (sim.generation - T0) + "\t" + ne);
	
	// Output as a TXT file
	writeFile(filePath=paste0(outputpath + "slim_output_ne2_" + simID + ".txt"), contents=timene , append=T);
}

s2 2 late() {
	
	m1.convertToSubstitution = F; // the effect of its change affect the next generation
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	
	//CS1 = asInteger(Ncs + SS1);   // CS1 = the Census Size of T=1 - the effect of it change affect the next generation - 
	CS1 = asInteger(Ncs + SSs[0]); //the effect of it change affect the next generation - CS2 = Census Size 2
	p1.setSubpopulationSize(CS1);
	cat("N = " + Ncs + "\t" + "'Census Size 1' = " + CS1 + "\n");
	catn("CS1 at generation: " + sim.generation);
}

s3 2 late() {
	
	/////////
	// TS1 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS1, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[0], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS1 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS1 + " " +"individuals at:") + " " +"TS1 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[0] + " " +"individuals at:") + " " +"TS1 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts1_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS1
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts1_" + simID + ".vcf"), outputMultiallelics = F);
}

s4 2 fitness(NULL) {

	// Kill sampled individuals
	if (individual.tag == 0)
	{
		return 0.0;
	} else {
 		return relFitness;
   }
}

s5 2 late() {
	p1.setSubpopulationSize(Ncs); //add this to force sbpopulation size to Ncs
}

s6 2 late() {
	
	//CS2 = asInteger(Ncs + SS2); //the effect of it change affect the next generation - CS2 = Census Size 2
	CS2 = asInteger(Ncs + SSs[1]); //the effect of it change affect the next generation - CS2 = Census Size 2
	p1.setSubpopulationSize(CS2);
	cat("Ncs = " + Ncs + "\t" + "'Census Size 2' = " + CS2 + "\n");
	catn("CS2 at generation: " + sim.generation);
}

s7 2 late() {
	
	/////////
	// TS2 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS2, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[1], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS2 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS2 + " " +"individuals at:") + " " +"TS2 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[1] + " " +"individuals at:") + " " +"TS2 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts2_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS2
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts2_" + simID + ".vcf"), outputMultiallelics = F);
}

s8 2 fitness(NULL) {
	
	// Kill sampled individuals
	if (individual.tag == 0)
	{
		return 0.0;
	} else {
 		return relFitness;
   }
}

s9 2 late() {
	p1.setSubpopulationSize(Ncs); //add this to force sbpopulation size to Ncs
}

s10 2 late() {

	//CS3 = asInteger(Ncs + SS3); //the effect of it change affect the next generation - CS3 = Census Size 3
	CS3 = asInteger(Ncs + SSs[2]); //the effect of it change affect the next generation - CS3 = Census Size 3
	p1.setSubpopulationSize(CS3);
	cat("Ncs = " + Ncs + "\t" + "'Census Size 3' = " + CS3 + "\n");
	catn("CS3 at generation: " + sim.generation);
}

s11 2 late() {
	
	/////////
	// TS3 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS3, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[2], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS3 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS3 + " " +"individuals at:") + " " +"TS3 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[2] + " " +"individuals at:") + " " +"TS3 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts3_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS3
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts3_" + simID + ".vcf"), outputMultiallelics = F);
}

s12 2 fitness(NULL) {
	
	// Kill sampled individuals
	if (individual.tag == 0)
	{
		return 0.0;
	} else {
 		return relFitness;
   }
}

s13 2 late() {

	p1.setSubpopulationSize(Ncs); //add this to force sbpopulation size to Ncs
}

s14 2 late() {

	//CS4 = asInteger(Ncs + SS4); //the effect of it change affect the next generation - CS4 = Census Size 4
	CS4 = asInteger(Ncs + SSs[3]); //the effect of it change affect the next generation - CS4 = Census Size 4
	p1.setSubpopulationSize(CS4);
	cat("Ncs = " + Ncs + "\t" + "'Census Size 4' = " + CS4 + "\n");
	catn("CS4 at generation: " + sim.generation);
}

s15 2 late() {
	
	/////////
	// TS4 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS4, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[3], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS4 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS4 + " " +"individuals at:") + " " +"TS4 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[3] + " " +"individuals at:") + " " +"TS4 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts4_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS4
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts4_" + simID + ".vcf"), outputMultiallelics = F);
}

s16 2 fitness(NULL) {

	// Kill sampled individuals
	if (individual.tag == 0)
	{
		return 0.0;
	} else {
 		return relFitness;
   }
}

s17 2 late() {
	p1.setSubpopulationSize(Ncs); //add this to force sbpopulation size to Ncs
}

s18 2 late() {
 
	//CS5 = asInteger(Ncs + SS5); //the effect of it change affect the next generation - CS5 = Census Size 5
	CS5 = asInteger(Ncs + SSs[4]); //the effect of it change affect the next generation - CS5 = Census Size 5
	p1.setSubpopulationSize(CS5);
	cat("Ncs = " + Ncs + "\t" + "'Census Size 5' = " + CS5 + "\n");
	catn("CS5 at generation: " + sim.generation);
}

s19 2 late() {
	
	/////////
	// TS5 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS5, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[4], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS5 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS5 + " " +"individuals at:") + " " +"TS5 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[4] + " " +"individuals at:") + " " +"TS5 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts5_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS5
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts5_" + simID + ".vcf"), outputMultiallelics = F);
}

s20 2 fitness(NULL) {

	// Kill sampled individuals
	if (individual.tag == 0)
	{
		return 0.0;
	} else {
 		return relFitness;
   }
}

s21 2 late() {
	p1.setSubpopulationSize(Ncs); //add this to force sbpopulation size to Ncs
}

s22 2 late() {
	
	//CS6 = asInteger(Ncs + SS6); //the effect of it change affect the next generation - CS6 = Census Size 6
	CS6 = asInteger(Ncs + SSs[5]); //the effect of it change affect the next generation - CS6 = Census Size 6
	p1.setSubpopulationSize(CS6);
	cat("Ncs = " + Ncs + "\t" + "'Census Size 6' = " + CS6 + "\n");
	catn("CS6 at generation: " + sim.generation);
}

s23 2 late() {
	
	/////////
	// TS6 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS6, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[5], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS6 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS6 + " " +"individuals at:") + " " +"TS6 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[5] + " " +"individuals at:") + " " +"TS6 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts6_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS6
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts6_" + simID + ".vcf"), outputMultiallelics = F);
}

s24 2 fitness(NULL) {

	// Kill sampled individuals
	if (individual.tag == 0)
	{
		return 0.0;
	} else {
 		return relFitness;
   }
}

s25 2 late() {
	p1.setSubpopulationSize(Ncs); //add this to force sbpopulation size to Ncs
}

s26 2 late() {

	//CS7 = asInteger(Ncs + SS7); //the effect of it change affect the next generation - CS7 = Census Size 7
	CS7 = asInteger(Ncs + SSs[6]); //the effect of it change affect the next generation - CS7 = Census Size 7
	p1.setSubpopulationSize(CS7);
	cat("Ncs = " + Ncs + "\t" + "'Census Size 7' = " + CS7 + "\n");
	catn("CS7 at generation: " + sim.generation);
}

s27 2 late() {
	
	/////////
	// TS7 //
	/////////

	// Tag all individuals
	sim.subpopulations.individuals.tag = 1;
	
	// Tag sampled individuals - to "kill" then later since it simulate a destructive sampling
	//sam_inds = sample(sim.subpopulations.individuals, size = SS7, replace = F);
	sam_inds = sample(sim.subpopulations.individuals, size = SSs[6], replace = F);
	sam_inds.tag = 0;
	
	///////////////////////////////////////////
	// OUTPUT TS7 - SAMPLED INDIVIDUALS      //
	///////////////////////////////////////////
	
	//cat("#OUT: " + " " + paste(SS7 + " " +"individuals at:") + " " +"TS7 =" + " " + paste(sim.generation) + "\n");
	cat("#OUT: " + " " + paste(SSs[6] + " " +"individuals at:") + " " +"TS7 =" + " " + paste(sim.generation) + "\n");
	cat(paste0(outputpath + "slim_output_sample_ts7_" + simID + ".vcf" + "\n"));
	
	// Output as a VCF file - SS7
	sam_inds.genomes.outputVCF(filePath=paste0(outputpath + "slim_output_sample_ts7_" + simID + ".vcf"), outputMultiallelics = F);
	
	sim.simulationFinished();
}
