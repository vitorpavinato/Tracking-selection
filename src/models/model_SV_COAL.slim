initialize() {
	
	// Genome-wide Neutral mutations fitness
	defineConstant("fm1", 0.0);        									// fm1 => the fitness for all neutral mutations "m1" - it is fixed with value 0
	defineConstant("fm2", 0.0);       									// fm2 => the fitness for all neutral mutations "m2" - it is fixed with value 0
	defineConstant("fm3", 0.0);       									// fm3 => the fitness for all neutral mutations "m2" - it is fixed with value 0
	defineConstant("fm4", 0.0);       									// fm4 => the fitness for all neutral mutations "m4" - it is fixed with value 0
	
	// INITIALIZE SIMULATION PARAMETERS
	
	initializeSLiMOptions(preventIncidentalSelfing = T); 
	initializeTreeSeq(checkCoalescence = T);
	initializeMutationRate(mu);
	
	// Define the GenomicElementType in the GENOME
	initializeMutationType("m1", dm1, "f", fm1);
	initializeMutationType("m2", dm2, "f", fm2);
	initializeMutationType("m3", dm3, "f", fm3);
	m1.mutationStackPolicy = "s";
	m2.mutationStackPolicy = "s";
	m3.mutationStackPolicy = "s";
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T;
	m3.convertToSubstitution = T;
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", c(m2,m3), c((1 - prbe), prbe));
	
	// Define the GenomicElementType in the EXTRA CHROMOSOME
	initializeMutationType("m4", dm4, "f", fm4);
	m4.mutationStackPolicy = "s";
	m4.convertToSubstitution = T;
	initializeGenomicElementType("g3", m4, 1);
	
	// GENOME's GenomicElementTypes
	
	// Assign each GenomicElementType:
	// g2
	for(i in g2_idx){
		initializeGenomicElement(g2, asInteger(e_starts[i]), asInteger(e_ends[i]));
	}
	// g1
	for(j in g1_idx){
		initializeGenomicElement(g1, asInteger(e_starts[j]), asInteger(e_ends[j]));
	}
	
	// EXTRA CHROMOSOME's GenomicElementTypes	
	initializeGenomicElement(g3, genomeS, asInteger((genomeS + chrS)-1));
		
	defineConstant("RECOMBRATES", "initializeRecombinationRate(rr_rates, asInteger(rr_limits));");
	executeLambda(RECOMBRATES);
}

1 {
	sim.addSubpop("p1", Neq);
	cat("mu = " + mu + "\t" + "Neq = " + Neq + "\n");
	
	p1.setSelfingRate(selfing);
	cat("selfing rate = " + selfing + "\n");

	sim.rescheduleScriptBlock(s1, start = (10*Neq + 200) -1, end = (10*Neq + 200) -1);
	cat("SIMULATION IS SCHEDULE TO STOP AT GENERATION: " + paste((10*Neq + 200) -1) + "\n");
			
}

1: late() {
	
	if (sim.treeSeqCoalesced())
	{
			catn(sim.generation + ": COALESCED");
			coal = paste(sim.generation);
		
			// Output a tree file
			sim.treeSeqOutput(path=paste0(outputpath + "slim_coalesced_SV_" + simID + ".tree"), simplify=F);
			
			// Output last generation value as a TXT file
			writeFile(filePath=paste0(outputpath + "slim_output_lastgen_" + simID + ".txt"), contents=coal);
			
			sim.simulationFinished();
	}		
}

s1 late() {
	
	catn("NO COALESCENCE BY GENERATION: " + sim.generation);	
	coal = paste(sim.generation);
	
	// Output a tree file
	sim.treeSeqOutput(path=paste0(outputpath + "slim_coalesced_SV_" + simID + ".tree"), simplify=F);
	
	// Output last generation value as a TXT file
	writeFile(filePath=paste0(outputpath + "slim_output_lastgen_" + simID + ".txt"), contents=coal);
	
	sim.simulationFinished();
}


